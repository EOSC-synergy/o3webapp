/* tslint:disable */
/* eslint-disable */
/**
 * Swagger REST API for O3as
 * This is **O3as REST API** based on the OpenAPI specification and leveraging Swagger UI for the [Ozone assessment service](https://o3as.data.kit.edu).  For the detailed documentation, please, visit [O3as documention](https://o3as.readthedocs.io).  **By using our service you agree to the [Terms of Use](https://o3as.data.kit.edu/policies/terms-of-use.html)**
 *
 * The version of the OpenAPI document: 0.8.5
 * Contact: o3as-support@lists.kit.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
    DUMMY_BASE_URL,
    assertParamExists,
    setApiKeyToObject,
    setBasicAuthToObject,
    setBearerAuthToObject,
    setOAuthToObject,
    setSearchParams,
    serializeDataIfNeeded,
    toPathString,
    createRequestFunction,
} from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 *
 * @export
 * @interface ApiInfo
 */
export interface ApiInfo {
    /**
     *
     * @type {string}
     * @memberof ApiInfo
     */
    author?: string;
    /**
     *
     * @type {string}
     * @memberof ApiInfo
     */
    'author-email'?: string;
    /**
     *
     * @type {string}
     * @memberof ApiInfo
     */
    'home-page'?: string;
    /**
     *
     * @type {string}
     * @memberof ApiInfo
     */
    license?: string;
    /**
     *
     * @type {string}
     * @memberof ApiInfo
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof ApiInfo
     */
    summary?: string;
    /**
     *
     * @type {string}
     * @memberof ApiInfo
     */
    version?: string;
}
/**
 *
 * @export
 * @interface ModelInfo
 */
export interface ModelInfo {
    /**
     *
     * @type {string}
     * @memberof ModelInfo
     */
    model?: string;
    /**
     *
     * @type {ModelInfoObj}
     * @memberof ModelInfo
     */
    tco3_zm?: ModelInfoObj;
    /**
     *
     * @type {ModelInfoObj}
     * @memberof ModelInfo
     */
    tco3_return?: ModelInfoObj;
    /**
     *
     * @type {ModelInfoObj}
     * @memberof ModelInfo
     */
    vmro3_zm?: ModelInfoObj;
}
/**
 *
 * @export
 * @interface ModelInfoObj
 */
export interface ModelInfoObj {
    /**
     *
     * @type {object}
     * @memberof ModelInfoObj
     */
    data?: object;
    /**
     *
     * @type {boolean}
     * @memberof ModelInfoObj
     */
    isdata?: boolean;
    /**
     *
     * @type {object}
     * @memberof ModelInfoObj
     */
    plotstyle?: object;
}
/**
 *
 * @export
 * @interface ModelsPlotStyle
 */
export interface ModelsPlotStyle {
    /**
     *
     * @type {string}
     * @memberof ModelsPlotStyle
     */
    model?: string;
    /**
     *
     * @type {ModelsPlotStyleObj}
     * @memberof ModelsPlotStyle
     */
    tco3_zm?: ModelsPlotStyleObj;
    /**
     *
     * @type {ModelsPlotStyleObj}
     * @memberof ModelsPlotStyle
     */
    tco3_return?: ModelsPlotStyleObj;
    /**
     *
     * @type {ModelsPlotStyleObj}
     * @memberof ModelsPlotStyle
     */
    vmro3_zm?: ModelsPlotStyleObj;
}
/**
 *
 * @export
 * @interface ModelsPlotStyleObj
 */
export interface ModelsPlotStyleObj {
    /**
     *
     * @type {object}
     * @memberof ModelsPlotStyleObj
     */
    plotstyle?: object;
}
/**
 *
 * @export
 * @interface O3Data
 */
export interface O3Data {
    /**
     *
     * @type {string}
     * @memberof O3Data
     */
    legalinfo?: string;
    /**
     *
     * @type {string}
     * @memberof O3Data
     */
    model: string;
    /**
     *
     * @type {object}
     * @memberof O3Data
     */
    plotstyle?: object;
    /**
     *
     * @type {Array<string>}
     * @memberof O3Data
     */
    x: Array<string>;
    /**
     *
     * @type {Array<number>}
     * @memberof O3Data
     */
    y: Array<number>;
}

/**
 * ApiApi - axios parameter creator
 * @export
 */
export const ApiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Information about the API (o3api metadata)
         * @summary Returns information about the API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        o3apiApiGetApiInfo: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/apiinfo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};

/**
 * ApiApi - functional programming interface
 * @export
 */
export const ApiApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = ApiApiAxiosParamCreator(configuration);
    return {
        /**
         * Information about the API (o3api metadata)
         * @summary Returns information about the API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async o3apiApiGetApiInfo(
            options?: AxiosRequestConfig
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.o3apiApiGetApiInfo(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    };
};

/**
 * ApiApi - factory interface
 * @export
 */
export const ApiApiFactory = function (
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance
) {
    const localVarFp = ApiApiFp(configuration);
    return {
        /**
         * Information about the API (o3api metadata)
         * @summary Returns information about the API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        o3apiApiGetApiInfo(options?: AxiosRequestConfig): AxiosPromise<ApiInfo> {
            return localVarFp
                .o3apiApiGetApiInfo(options)
                .then((request) => request(axios, basePath));
        },
    };
};

/**
 * ApiApi - object-oriented interface
 * @export
 * @class ApiApi
 * @extends {BaseAPI}
 */
export class ApiApi extends BaseAPI {
    /**
     * Information about the API (o3api metadata)
     * @summary Returns information about the API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public o3apiApiGetApiInfo(options?: AxiosRequestConfig) {
        return ApiApiFp(this.configuration)
            .o3apiApiGetApiInfo(options)
            .then((request) => request(this.axios, this.basePath));
    }
}

/**
 * DataApi - axios parameter creator
 * @export
 */
export const DataApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Raw data to be processed for building tco3_return plot
         * @summary Returns raw data for tco3_return
         * @param {Array<string>} models Name(s) of model(s) (dataset-model)
         * @param {number} [begin] Year to start data scanning from
         * @param {number} [end] Year to finish data scanning
         * @param {Array<number>} [month] Month(s) to select, if not a whole year
         * @param {number} [latMin] Latitude (min) to define the range (-90..90)
         * @param {number} [latMax] Latitude (max) to define the range (-90..90)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        o3apiApiGetDataTco3Return: async (
            models: Array<string>,
            begin?: number,
            end?: number,
            month?: Array<number>,
            latMin?: number,
            latMax?: number,
            options: AxiosRequestConfig = {}
        ): Promise<RequestArgs> => {
            // verify required parameter 'models' is not null or undefined
            assertParamExists('o3apiApiGetDataTco3Return', 'models', models);
            const localVarPath = `/data/tco3_return`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (begin !== undefined) {
                localVarQueryParameter['begin'] = begin;
            }

            if (end !== undefined) {
                localVarQueryParameter['end'] = end;
            }

            if (month) {
                localVarQueryParameter['month'] = month.join(COLLECTION_FORMATS.csv);
            }

            if (latMin !== undefined) {
                localVarQueryParameter['lat_min'] = latMin;
            }

            if (latMax !== undefined) {
                localVarQueryParameter['lat_max'] = latMax;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            localVarRequestOptions.data = serializeDataIfNeeded(
                models,
                localVarRequestOptions,
                configuration
            );

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Raw data to be processed for building tco3_zm plot
         * @summary Returns raw data for tco3_zm
         * @param {Array<string>} models Name(s) of model(s) (dataset-model)
         * @param {number} [begin] Year to start data scanning from
         * @param {number} [end] Year to finish data scanning
         * @param {Array<number>} [month] Month(s) to select, if not a whole year
         * @param {number} [latMin] Latitude (min) to define the range (-90..90)
         * @param {number} [latMax] Latitude (max) to define the range (-90..90)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        o3apiApiGetDataTco3Zm: async (
            models: Array<string>,
            begin?: number,
            end?: number,
            month?: Array<number>,
            latMin?: number,
            latMax?: number,
            options: AxiosRequestConfig = {}
        ): Promise<RequestArgs> => {
            // verify required parameter 'models' is not null or undefined
            assertParamExists('o3apiApiGetDataTco3Zm', 'models', models);
            const localVarPath = `/data/tco3_zm`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (begin !== undefined) {
                localVarQueryParameter['begin'] = begin;
            }

            if (end !== undefined) {
                localVarQueryParameter['end'] = end;
            }

            if (month) {
                localVarQueryParameter['month'] = month.join(COLLECTION_FORMATS.csv);
            }

            if (latMin !== undefined) {
                localVarQueryParameter['lat_min'] = latMin;
            }

            if (latMax !== undefined) {
                localVarQueryParameter['lat_max'] = latMax;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            localVarRequestOptions.data = serializeDataIfNeeded(
                models,
                localVarRequestOptions,
                configuration
            );

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List of plot types with the available raw data
         * @summary Returns a list of plot types with the available raw data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        o3apiApiGetDataTypes: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/data`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};

/**
 * DataApi - functional programming interface
 * @export
 */
export const DataApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = DataApiAxiosParamCreator(configuration);
    return {
        /**
         * Raw data to be processed for building tco3_return plot
         * @summary Returns raw data for tco3_return
         * @param {Array<string>} models Name(s) of model(s) (dataset-model)
         * @param {number} [begin] Year to start data scanning from
         * @param {number} [end] Year to finish data scanning
         * @param {Array<number>} [month] Month(s) to select, if not a whole year
         * @param {number} [latMin] Latitude (min) to define the range (-90..90)
         * @param {number} [latMax] Latitude (max) to define the range (-90..90)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async o3apiApiGetDataTco3Return(
            models: Array<string>,
            begin?: number,
            end?: number,
            month?: Array<number>,
            latMin?: number,
            latMax?: number,
            options?: AxiosRequestConfig
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<O3Data>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.o3apiApiGetDataTco3Return(
                models,
                begin,
                end,
                month,
                latMin,
                latMax,
                options
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Raw data to be processed for building tco3_zm plot
         * @summary Returns raw data for tco3_zm
         * @param {Array<string>} models Name(s) of model(s) (dataset-model)
         * @param {number} [begin] Year to start data scanning from
         * @param {number} [end] Year to finish data scanning
         * @param {Array<number>} [month] Month(s) to select, if not a whole year
         * @param {number} [latMin] Latitude (min) to define the range (-90..90)
         * @param {number} [latMax] Latitude (max) to define the range (-90..90)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async o3apiApiGetDataTco3Zm(
            models: Array<string>,
            begin?: number,
            end?: number,
            month?: Array<number>,
            latMin?: number,
            latMax?: number,
            options?: AxiosRequestConfig
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<O3Data>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.o3apiApiGetDataTco3Zm(
                models,
                begin,
                end,
                month,
                latMin,
                latMax,
                options
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List of plot types with the available raw data
         * @summary Returns a list of plot types with the available raw data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async o3apiApiGetDataTypes(
            options?: AxiosRequestConfig
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.o3apiApiGetDataTypes(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    };
};

/**
 * DataApi - factory interface
 * @export
 */
export const DataApiFactory = function (
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance
) {
    const localVarFp = DataApiFp(configuration);
    return {
        /**
         * Raw data to be processed for building tco3_return plot
         * @summary Returns raw data for tco3_return
         * @param {DataApiO3apiApiGetDataTco3ReturnRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        o3apiApiGetDataTco3Return(
            requestParameters: DataApiO3apiApiGetDataTco3ReturnRequest,
            options?: AxiosRequestConfig
        ): AxiosPromise<Array<O3Data>> {
            return localVarFp
                .o3apiApiGetDataTco3Return(
                    requestParameters.models,
                    requestParameters.begin,
                    requestParameters.end,
                    requestParameters.month,
                    requestParameters.latMin,
                    requestParameters.latMax,
                    options
                )
                .then((request) => request(axios, basePath));
        },
        /**
         * Raw data to be processed for building tco3_zm plot
         * @summary Returns raw data for tco3_zm
         * @param {DataApiO3apiApiGetDataTco3ZmRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        o3apiApiGetDataTco3Zm(
            requestParameters: DataApiO3apiApiGetDataTco3ZmRequest,
            options?: AxiosRequestConfig
        ): AxiosPromise<Array<O3Data>> {
            return localVarFp
                .o3apiApiGetDataTco3Zm(
                    requestParameters.models,
                    requestParameters.begin,
                    requestParameters.end,
                    requestParameters.month,
                    requestParameters.latMin,
                    requestParameters.latMax,
                    options
                )
                .then((request) => request(axios, basePath));
        },
        /**
         * List of plot types with the available raw data
         * @summary Returns a list of plot types with the available raw data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        o3apiApiGetDataTypes(options?: AxiosRequestConfig): AxiosPromise<Array<string>> {
            return localVarFp
                .o3apiApiGetDataTypes(options)
                .then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for o3apiApiGetDataTco3Return operation in DataApi.
 * @export
 * @interface DataApiO3apiApiGetDataTco3ReturnRequest
 */
export interface DataApiO3apiApiGetDataTco3ReturnRequest {
    /**
     * Name(s) of model(s) (dataset-model)
     * @type {Array<string>}
     * @memberof DataApiO3apiApiGetDataTco3Return
     */
    readonly models: Array<string>;

    /**
     * Year to start data scanning from
     * @type {number}
     * @memberof DataApiO3apiApiGetDataTco3Return
     */
    readonly begin?: number;

    /**
     * Year to finish data scanning
     * @type {number}
     * @memberof DataApiO3apiApiGetDataTco3Return
     */
    readonly end?: number;

    /**
     * Month(s) to select, if not a whole year
     * @type {Array<number>}
     * @memberof DataApiO3apiApiGetDataTco3Return
     */
    readonly month?: Array<number>;

    /**
     * Latitude (min) to define the range (-90..90)
     * @type {number}
     * @memberof DataApiO3apiApiGetDataTco3Return
     */
    readonly latMin?: number;

    /**
     * Latitude (max) to define the range (-90..90)
     * @type {number}
     * @memberof DataApiO3apiApiGetDataTco3Return
     */
    readonly latMax?: number;
}

/**
 * Request parameters for o3apiApiGetDataTco3Zm operation in DataApi.
 * @export
 * @interface DataApiO3apiApiGetDataTco3ZmRequest
 */
export interface DataApiO3apiApiGetDataTco3ZmRequest {
    /**
     * Name(s) of model(s) (dataset-model)
     * @type {Array<string>}
     * @memberof DataApiO3apiApiGetDataTco3Zm
     */
    readonly models: Array<string>;

    /**
     * Year to start data scanning from
     * @type {number}
     * @memberof DataApiO3apiApiGetDataTco3Zm
     */
    readonly begin?: number;

    /**
     * Year to finish data scanning
     * @type {number}
     * @memberof DataApiO3apiApiGetDataTco3Zm
     */
    readonly end?: number;

    /**
     * Month(s) to select, if not a whole year
     * @type {Array<number>}
     * @memberof DataApiO3apiApiGetDataTco3Zm
     */
    readonly month?: Array<number>;

    /**
     * Latitude (min) to define the range (-90..90)
     * @type {number}
     * @memberof DataApiO3apiApiGetDataTco3Zm
     */
    readonly latMin?: number;

    /**
     * Latitude (max) to define the range (-90..90)
     * @type {number}
     * @memberof DataApiO3apiApiGetDataTco3Zm
     */
    readonly latMax?: number;
}

/**
 * DataApi - object-oriented interface
 * @export
 * @class DataApi
 * @extends {BaseAPI}
 */
export class DataApi extends BaseAPI {
    /**
     * Raw data to be processed for building tco3_return plot
     * @summary Returns raw data for tco3_return
     * @param {DataApiO3apiApiGetDataTco3ReturnRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    public o3apiApiGetDataTco3Return(
        requestParameters: DataApiO3apiApiGetDataTco3ReturnRequest,
        options?: AxiosRequestConfig
    ) {
        return DataApiFp(this.configuration)
            .o3apiApiGetDataTco3Return(
                requestParameters.models,
                requestParameters.begin,
                requestParameters.end,
                requestParameters.month,
                requestParameters.latMin,
                requestParameters.latMax,
                options
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     * Raw data to be processed for building tco3_zm plot
     * @summary Returns raw data for tco3_zm
     * @param {DataApiO3apiApiGetDataTco3ZmRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    public o3apiApiGetDataTco3Zm(
        requestParameters: DataApiO3apiApiGetDataTco3ZmRequest,
        options?: AxiosRequestConfig
    ) {
        return DataApiFp(this.configuration)
            .o3apiApiGetDataTco3Zm(
                requestParameters.models,
                requestParameters.begin,
                requestParameters.end,
                requestParameters.month,
                requestParameters.latMin,
                requestParameters.latMax,
                options
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     * List of plot types with the available raw data
     * @summary Returns a list of plot types with the available raw data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    public o3apiApiGetDataTypes(options?: AxiosRequestConfig) {
        return DataApiFp(this.configuration)
            .o3apiApiGetDataTypes(options)
            .then((request) => request(this.axios, this.basePath));
    }
}

/**
 * ModelsApi - axios parameter creator
 * @export
 */
export const ModelsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Detailed information about a model
         * @summary Returns detailed information about a model
         * @param {string} model model name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        o3apiApiGetModelDetail: async (
            model: string,
            options: AxiosRequestConfig = {}
        ): Promise<RequestArgs> => {
            // verify required parameter 'model' is not null or undefined
            assertParamExists('o3apiApiGetModelDetail', 'model', model);
            const localVarPath = `/models/{model}`.replace(
                `{${'model'}}`,
                encodeURIComponent(String(model))
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List of available models
         * @summary Returns a list of available models
         * @param {string} [ptype] Plot type (tco3_return, tco3_zm, vmro3_zm)
         * @param {string} [select] Select models according to the {select} pattern
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        o3apiApiGetModelsList: async (
            ptype?: string,
            select?: string,
            options: AxiosRequestConfig = {}
        ): Promise<RequestArgs> => {
            const localVarPath = `/models`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ptype !== undefined) {
                localVarQueryParameter['ptype'] = ptype;
            }

            if (select !== undefined) {
                localVarQueryParameter['select'] = select;
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Plot styles for selected models and plot type
         * @summary Returns plot styles for models
         * @param {string} [ptype] Plot type (tco3_return, tco3_zm, vmro3_zm)
         * @param {Array<string>} [models] Name(s) of model(s) (dataset-model)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        o3apiApiGetPlotStyle: async (
            ptype?: string,
            models?: Array<string>,
            options: AxiosRequestConfig = {}
        ): Promise<RequestArgs> => {
            const localVarPath = `/models/plotstyle`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ptype !== undefined) {
                localVarQueryParameter['ptype'] = ptype;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            localVarRequestOptions.data = serializeDataIfNeeded(
                models,
                localVarRequestOptions,
                configuration
            );

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};

/**
 * ModelsApi - functional programming interface
 * @export
 */
export const ModelsApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = ModelsApiAxiosParamCreator(configuration);
    return {
        /**
         * Detailed information about a model
         * @summary Returns detailed information about a model
         * @param {string} model model name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async o3apiApiGetModelDetail(
            model: string,
            options?: AxiosRequestConfig
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.o3apiApiGetModelDetail(
                model,
                options
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List of available models
         * @summary Returns a list of available models
         * @param {string} [ptype] Plot type (tco3_return, tco3_zm, vmro3_zm)
         * @param {string} [select] Select models according to the {select} pattern
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async o3apiApiGetModelsList(
            ptype?: string,
            select?: string,
            options?: AxiosRequestConfig
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.o3apiApiGetModelsList(
                ptype,
                select,
                options
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Plot styles for selected models and plot type
         * @summary Returns plot styles for models
         * @param {string} [ptype] Plot type (tco3_return, tco3_zm, vmro3_zm)
         * @param {Array<string>} [models] Name(s) of model(s) (dataset-model)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async o3apiApiGetPlotStyle(
            ptype?: string,
            models?: Array<string>,
            options?: AxiosRequestConfig
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelsPlotStyle>>
        > {
            const localVarAxiosArgs = await localVarAxiosParamCreator.o3apiApiGetPlotStyle(
                ptype,
                models,
                options
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    };
};

/**
 * ModelsApi - factory interface
 * @export
 */
export const ModelsApiFactory = function (
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance
) {
    const localVarFp = ModelsApiFp(configuration);
    return {
        /**
         * Detailed information about a model
         * @summary Returns detailed information about a model
         * @param {ModelsApiO3apiApiGetModelDetailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        o3apiApiGetModelDetail(
            requestParameters: ModelsApiO3apiApiGetModelDetailRequest,
            options?: AxiosRequestConfig
        ): AxiosPromise<ModelInfo> {
            return localVarFp
                .o3apiApiGetModelDetail(requestParameters.model, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * List of available models
         * @summary Returns a list of available models
         * @param {ModelsApiO3apiApiGetModelsListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        o3apiApiGetModelsList(
            requestParameters: ModelsApiO3apiApiGetModelsListRequest = {},
            options?: AxiosRequestConfig
        ): AxiosPromise<Array<string>> {
            return localVarFp
                .o3apiApiGetModelsList(requestParameters.ptype, requestParameters.select, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Plot styles for selected models and plot type
         * @summary Returns plot styles for models
         * @param {ModelsApiO3apiApiGetPlotStyleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        o3apiApiGetPlotStyle(
            requestParameters: ModelsApiO3apiApiGetPlotStyleRequest = {},
            options?: AxiosRequestConfig
        ): AxiosPromise<Array<ModelsPlotStyle>> {
            return localVarFp
                .o3apiApiGetPlotStyle(requestParameters.ptype, requestParameters.models, options)
                .then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for o3apiApiGetModelDetail operation in ModelsApi.
 * @export
 * @interface ModelsApiO3apiApiGetModelDetailRequest
 */
export interface ModelsApiO3apiApiGetModelDetailRequest {
    /**
     * model name
     * @type {string}
     * @memberof ModelsApiO3apiApiGetModelDetail
     */
    readonly model: string;
}

/**
 * Request parameters for o3apiApiGetModelsList operation in ModelsApi.
 * @export
 * @interface ModelsApiO3apiApiGetModelsListRequest
 */
export interface ModelsApiO3apiApiGetModelsListRequest {
    /**
     * Plot type (tco3_return, tco3_zm, vmro3_zm)
     * @type {string}
     * @memberof ModelsApiO3apiApiGetModelsList
     */
    readonly ptype?: string;

    /**
     * Select models according to the {select} pattern
     * @type {string}
     * @memberof ModelsApiO3apiApiGetModelsList
     */
    readonly select?: string;
}

/**
 * Request parameters for o3apiApiGetPlotStyle operation in ModelsApi.
 * @export
 * @interface ModelsApiO3apiApiGetPlotStyleRequest
 */
export interface ModelsApiO3apiApiGetPlotStyleRequest {
    /**
     * Plot type (tco3_return, tco3_zm, vmro3_zm)
     * @type {string}
     * @memberof ModelsApiO3apiApiGetPlotStyle
     */
    readonly ptype?: string;

    /**
     * Name(s) of model(s) (dataset-model)
     * @type {Array<string>}
     * @memberof ModelsApiO3apiApiGetPlotStyle
     */
    readonly models?: Array<string>;
}

/**
 * ModelsApi - object-oriented interface
 * @export
 * @class ModelsApi
 * @extends {BaseAPI}
 */
export class ModelsApi extends BaseAPI {
    /**
     * Detailed information about a model
     * @summary Returns detailed information about a model
     * @param {ModelsApiO3apiApiGetModelDetailRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    public o3apiApiGetModelDetail(
        requestParameters: ModelsApiO3apiApiGetModelDetailRequest,
        options?: AxiosRequestConfig
    ) {
        return ModelsApiFp(this.configuration)
            .o3apiApiGetModelDetail(requestParameters.model, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     * List of available models
     * @summary Returns a list of available models
     * @param {ModelsApiO3apiApiGetModelsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    public o3apiApiGetModelsList(
        requestParameters: ModelsApiO3apiApiGetModelsListRequest = {},
        options?: AxiosRequestConfig
    ) {
        return ModelsApiFp(this.configuration)
            .o3apiApiGetModelsList(requestParameters.ptype, requestParameters.select, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     * Plot styles for selected models and plot type
     * @summary Returns plot styles for models
     * @param {ModelsApiO3apiApiGetPlotStyleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    public o3apiApiGetPlotStyle(
        requestParameters: ModelsApiO3apiApiGetPlotStyleRequest = {},
        options?: AxiosRequestConfig
    ) {
        return ModelsApiFp(this.configuration)
            .o3apiApiGetPlotStyle(requestParameters.ptype, requestParameters.models, options)
            .then((request) => request(this.axios, this.basePath));
    }
}

/**
 * PlotsApi - axios parameter creator
 * @export
 */
export const PlotsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * List of possible plots
         * @summary Returns a list of possible plots
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        o3apiApiGetPlotTypes: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/plots`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * tco3_return plot or corresponding data points
         * @summary Builds and returns tco3_return plot
         * @param {string} refMeas Reference observational measurument
         * @param {number} refYear Reference year for the obsevational measurement
         * @param {Array<string>} models Name(s) of model(s) (dataset-model)
         * @param {Array<number>} [month] Month(s) to select, if not a whole year
         * @param {number} [latMin] Latitude (min) to define the range (-90..90)
         * @param {number} [latMax] Latitude (max) to define the range (-90..90)
         * @param {boolean} [refFillna] Select \&#39;true\&#39; to linearly interpolate missing values in the reference measurement
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        o3apiApiPlotTco3Return: async (
            refMeas: string,
            refYear: number,
            models: Array<string>,
            month?: Array<number>,
            latMin?: number,
            latMax?: number,
            refFillna?: boolean,
            options: AxiosRequestConfig = {}
        ): Promise<RequestArgs> => {
            // verify required parameter 'refMeas' is not null or undefined
            assertParamExists('o3apiApiPlotTco3Return', 'refMeas', refMeas);
            // verify required parameter 'refYear' is not null or undefined
            assertParamExists('o3apiApiPlotTco3Return', 'refYear', refYear);
            // verify required parameter 'models' is not null or undefined
            assertParamExists('o3apiApiPlotTco3Return', 'models', models);
            const localVarPath = `/plots/tco3_return`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (month) {
                localVarQueryParameter['month'] = month.join(COLLECTION_FORMATS.csv);
            }

            if (latMin !== undefined) {
                localVarQueryParameter['lat_min'] = latMin;
            }

            if (latMax !== undefined) {
                localVarQueryParameter['lat_max'] = latMax;
            }

            if (refMeas !== undefined) {
                localVarQueryParameter['ref_meas'] = refMeas;
            }

            if (refYear !== undefined) {
                localVarQueryParameter['ref_year'] = refYear;
            }

            if (refFillna !== undefined) {
                localVarQueryParameter['ref_fillna'] = refFillna;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            localVarRequestOptions.data = serializeDataIfNeeded(
                models,
                localVarRequestOptions,
                configuration
            );

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * tco3_zm plot or corresponding data points
         * @summary Builds and returns tco3_zm plot
         * @param {string} refMeas Reference observational measurument
         * @param {number} refYear Reference year for the obsevational measurement
         * @param {Array<string>} models Name(s) of model(s) (dataset-model)
         * @param {number} [begin] Year to start data scanning from
         * @param {number} [end] Year to finish data scanning
         * @param {Array<number>} [month] Month(s) to select, if not a whole year
         * @param {number} [latMin] Latitude (min) to define the range (-90..90)
         * @param {number} [latMax] Latitude (max) to define the range (-90..90)
         * @param {boolean} [refFillna] Select \&#39;true\&#39; to linearly interpolate missing values in the reference measurement
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        o3apiApiPlotTco3Zm: async (
            refMeas: string,
            refYear: number,
            models: Array<string>,
            begin?: number,
            end?: number,
            month?: Array<number>,
            latMin?: number,
            latMax?: number,
            refFillna?: boolean,
            options: AxiosRequestConfig = {}
        ): Promise<RequestArgs> => {
            // verify required parameter 'refMeas' is not null or undefined
            assertParamExists('o3apiApiPlotTco3Zm', 'refMeas', refMeas);
            // verify required parameter 'refYear' is not null or undefined
            assertParamExists('o3apiApiPlotTco3Zm', 'refYear', refYear);
            // verify required parameter 'models' is not null or undefined
            assertParamExists('o3apiApiPlotTco3Zm', 'models', models);
            const localVarPath = `/plots/tco3_zm`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (begin !== undefined) {
                localVarQueryParameter['begin'] = begin;
            }

            if (end !== undefined) {
                localVarQueryParameter['end'] = end;
            }

            if (month) {
                localVarQueryParameter['month'] = month.join(COLLECTION_FORMATS.csv);
            }

            if (latMin !== undefined) {
                localVarQueryParameter['lat_min'] = latMin;
            }

            if (latMax !== undefined) {
                localVarQueryParameter['lat_max'] = latMax;
            }

            if (refMeas !== undefined) {
                localVarQueryParameter['ref_meas'] = refMeas;
            }

            if (refYear !== undefined) {
                localVarQueryParameter['ref_year'] = refYear;
            }

            if (refFillna !== undefined) {
                localVarQueryParameter['ref_fillna'] = refFillna;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            localVarRequestOptions.data = serializeDataIfNeeded(
                models,
                localVarRequestOptions,
                configuration
            );

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};

/**
 * PlotsApi - functional programming interface
 * @export
 */
export const PlotsApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = PlotsApiAxiosParamCreator(configuration);
    return {
        /**
         * List of possible plots
         * @summary Returns a list of possible plots
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async o3apiApiGetPlotTypes(
            options?: AxiosRequestConfig
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.o3apiApiGetPlotTypes(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * tco3_return plot or corresponding data points
         * @summary Builds and returns tco3_return plot
         * @param {string} refMeas Reference observational measurument
         * @param {number} refYear Reference year for the obsevational measurement
         * @param {Array<string>} models Name(s) of model(s) (dataset-model)
         * @param {Array<number>} [month] Month(s) to select, if not a whole year
         * @param {number} [latMin] Latitude (min) to define the range (-90..90)
         * @param {number} [latMax] Latitude (max) to define the range (-90..90)
         * @param {boolean} [refFillna] Select \&#39;true\&#39; to linearly interpolate missing values in the reference measurement
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async o3apiApiPlotTco3Return(
            refMeas: string,
            refYear: number,
            models: Array<string>,
            month?: Array<number>,
            latMin?: number,
            latMax?: number,
            refFillna?: boolean,
            options?: AxiosRequestConfig
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<O3Data>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.o3apiApiPlotTco3Return(
                refMeas,
                refYear,
                models,
                month,
                latMin,
                latMax,
                refFillna,
                options
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * tco3_zm plot or corresponding data points
         * @summary Builds and returns tco3_zm plot
         * @param {string} refMeas Reference observational measurument
         * @param {number} refYear Reference year for the obsevational measurement
         * @param {Array<string>} models Name(s) of model(s) (dataset-model)
         * @param {number} [begin] Year to start data scanning from
         * @param {number} [end] Year to finish data scanning
         * @param {Array<number>} [month] Month(s) to select, if not a whole year
         * @param {number} [latMin] Latitude (min) to define the range (-90..90)
         * @param {number} [latMax] Latitude (max) to define the range (-90..90)
         * @param {boolean} [refFillna] Select \&#39;true\&#39; to linearly interpolate missing values in the reference measurement
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async o3apiApiPlotTco3Zm(
            refMeas: string,
            refYear: number,
            models: Array<string>,
            begin?: number,
            end?: number,
            month?: Array<number>,
            latMin?: number,
            latMax?: number,
            refFillna?: boolean,
            options?: AxiosRequestConfig
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<O3Data>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.o3apiApiPlotTco3Zm(
                refMeas,
                refYear,
                models,
                begin,
                end,
                month,
                latMin,
                latMax,
                refFillna,
                options
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    };
};

/**
 * PlotsApi - factory interface
 * @export
 */
export const PlotsApiFactory = function (
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance
) {
    const localVarFp = PlotsApiFp(configuration);
    return {
        /**
         * List of possible plots
         * @summary Returns a list of possible plots
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        o3apiApiGetPlotTypes(options?: AxiosRequestConfig): AxiosPromise<Array<string>> {
            return localVarFp
                .o3apiApiGetPlotTypes(options)
                .then((request) => request(axios, basePath));
        },
        /**
         * tco3_return plot or corresponding data points
         * @summary Builds and returns tco3_return plot
         * @param {PlotsApiO3apiApiPlotTco3ReturnRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        o3apiApiPlotTco3Return(
            requestParameters: PlotsApiO3apiApiPlotTco3ReturnRequest,
            options?: AxiosRequestConfig
        ): AxiosPromise<Array<O3Data>> {
            return localVarFp
                .o3apiApiPlotTco3Return(
                    requestParameters.refMeas,
                    requestParameters.refYear,
                    requestParameters.models,
                    requestParameters.month,
                    requestParameters.latMin,
                    requestParameters.latMax,
                    requestParameters.refFillna,
                    options
                )
                .then((request) => request(axios, basePath));
        },
        /**
         * tco3_zm plot or corresponding data points
         * @summary Builds and returns tco3_zm plot
         * @param {PlotsApiO3apiApiPlotTco3ZmRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        o3apiApiPlotTco3Zm(
            requestParameters: PlotsApiO3apiApiPlotTco3ZmRequest,
            options?: AxiosRequestConfig
        ): AxiosPromise<Array<O3Data>> {
            return localVarFp
                .o3apiApiPlotTco3Zm(
                    requestParameters.refMeas,
                    requestParameters.refYear,
                    requestParameters.models,
                    requestParameters.begin,
                    requestParameters.end,
                    requestParameters.month,
                    requestParameters.latMin,
                    requestParameters.latMax,
                    requestParameters.refFillna,
                    options
                )
                .then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for o3apiApiPlotTco3Return operation in PlotsApi.
 * @export
 * @interface PlotsApiO3apiApiPlotTco3ReturnRequest
 */
export interface PlotsApiO3apiApiPlotTco3ReturnRequest {
    /**
     * Reference observational measurument
     * @type {string}
     * @memberof PlotsApiO3apiApiPlotTco3Return
     */
    readonly refMeas: string;

    /**
     * Reference year for the obsevational measurement
     * @type {number}
     * @memberof PlotsApiO3apiApiPlotTco3Return
     */
    readonly refYear: number;

    /**
     * Name(s) of model(s) (dataset-model)
     * @type {Array<string>}
     * @memberof PlotsApiO3apiApiPlotTco3Return
     */
    readonly models: Array<string>;

    /**
     * Month(s) to select, if not a whole year
     * @type {Array<number>}
     * @memberof PlotsApiO3apiApiPlotTco3Return
     */
    readonly month?: Array<number>;

    /**
     * Latitude (min) to define the range (-90..90)
     * @type {number}
     * @memberof PlotsApiO3apiApiPlotTco3Return
     */
    readonly latMin?: number;

    /**
     * Latitude (max) to define the range (-90..90)
     * @type {number}
     * @memberof PlotsApiO3apiApiPlotTco3Return
     */
    readonly latMax?: number;

    /**
     * Select \&#39;true\&#39; to linearly interpolate missing values in the reference measurement
     * @type {boolean}
     * @memberof PlotsApiO3apiApiPlotTco3Return
     */
    readonly refFillna?: boolean;
}

/**
 * Request parameters for o3apiApiPlotTco3Zm operation in PlotsApi.
 * @export
 * @interface PlotsApiO3apiApiPlotTco3ZmRequest
 */
export interface PlotsApiO3apiApiPlotTco3ZmRequest {
    /**
     * Reference observational measurument
     * @type {string}
     * @memberof PlotsApiO3apiApiPlotTco3Zm
     */
    readonly refMeas: string;

    /**
     * Reference year for the obsevational measurement
     * @type {number}
     * @memberof PlotsApiO3apiApiPlotTco3Zm
     */
    readonly refYear: number;

    /**
     * Name(s) of model(s) (dataset-model)
     * @type {Array<string>}
     * @memberof PlotsApiO3apiApiPlotTco3Zm
     */
    readonly models: Array<string>;

    /**
     * Year to start data scanning from
     * @type {number}
     * @memberof PlotsApiO3apiApiPlotTco3Zm
     */
    readonly begin?: number;

    /**
     * Year to finish data scanning
     * @type {number}
     * @memberof PlotsApiO3apiApiPlotTco3Zm
     */
    readonly end?: number;

    /**
     * Month(s) to select, if not a whole year
     * @type {Array<number>}
     * @memberof PlotsApiO3apiApiPlotTco3Zm
     */
    readonly month?: Array<number>;

    /**
     * Latitude (min) to define the range (-90..90)
     * @type {number}
     * @memberof PlotsApiO3apiApiPlotTco3Zm
     */
    readonly latMin?: number;

    /**
     * Latitude (max) to define the range (-90..90)
     * @type {number}
     * @memberof PlotsApiO3apiApiPlotTco3Zm
     */
    readonly latMax?: number;

    /**
     * Select \&#39;true\&#39; to linearly interpolate missing values in the reference measurement
     * @type {boolean}
     * @memberof PlotsApiO3apiApiPlotTco3Zm
     */
    readonly refFillna?: boolean;
}

/**
 * PlotsApi - object-oriented interface
 * @export
 * @class PlotsApi
 * @extends {BaseAPI}
 */
export class PlotsApi extends BaseAPI {
    /**
     * List of possible plots
     * @summary Returns a list of possible plots
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlotsApi
     */
    public o3apiApiGetPlotTypes(options?: AxiosRequestConfig) {
        return PlotsApiFp(this.configuration)
            .o3apiApiGetPlotTypes(options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     * tco3_return plot or corresponding data points
     * @summary Builds and returns tco3_return plot
     * @param {PlotsApiO3apiApiPlotTco3ReturnRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlotsApi
     */
    public o3apiApiPlotTco3Return(
        requestParameters: PlotsApiO3apiApiPlotTco3ReturnRequest,
        options?: AxiosRequestConfig
    ) {
        return PlotsApiFp(this.configuration)
            .o3apiApiPlotTco3Return(
                requestParameters.refMeas,
                requestParameters.refYear,
                requestParameters.models,
                requestParameters.month,
                requestParameters.latMin,
                requestParameters.latMax,
                requestParameters.refFillna,
                options
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     * tco3_zm plot or corresponding data points
     * @summary Builds and returns tco3_zm plot
     * @param {PlotsApiO3apiApiPlotTco3ZmRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlotsApi
     */
    public o3apiApiPlotTco3Zm(
        requestParameters: PlotsApiO3apiApiPlotTco3ZmRequest,
        options?: AxiosRequestConfig
    ) {
        return PlotsApiFp(this.configuration)
            .o3apiApiPlotTco3Zm(
                requestParameters.refMeas,
                requestParameters.refYear,
                requestParameters.models,
                requestParameters.begin,
                requestParameters.end,
                requestParameters.month,
                requestParameters.latMin,
                requestParameters.latMax,
                requestParameters.refFillna,
                options
            )
            .then((request) => request(this.axios, this.basePath));
    }
}
