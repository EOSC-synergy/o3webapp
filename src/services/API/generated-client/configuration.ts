/* tslint:disable */

/* eslint-disable */
/**
 * Swagger REST API for O3as This is **O3as REST API** based on the OpenAPI specification and
 * leveraging Swagger UI for the [Ozone assessment service](https://o3as.data.kit.edu). For the
 * detailed documentation, please, visit [O3as documention](https://o3as.readthedocs.io). **By using
 * our service you agree to the [Terms of
 * Use](https://o3as.data.kit.edu/policies/terms-of-use.html)**
 *
 * The version of the OpenAPI document: 0.8.5 Contact: o3as-support@lists.kit.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech Do not edit the class manually.
 */

export interface ConfigurationParameters {
    apiKey?:
        | string
        | Promise<string>
        | ((name: string) => string)
        | ((name: string) => Promise<string>);
    username?: string;
    password?: string;
    accessToken?:
        | string
        | Promise<string>
        | ((name?: string, scopes?: string[]) => string)
        | ((name?: string, scopes?: string[]) => Promise<string>);
    basePath?: string;
    baseOptions?: any;
    formDataCtor?: new () => any;
}

export class Configuration {
    /**
     * Parameter for apiKey security
     *
     * @memberof Configuration
     * @param name Security name
     */
    apiKey?:
        | string
        | Promise<string>
        | ((name: string) => string)
        | ((name: string) => Promise<string>);
    /**
     * Parameter for basic security
     *
     * @memberof Configuration
     * @type {string}
     */
    username?: string;
    /**
     * Parameter for basic security
     *
     * @memberof Configuration
     * @type {string}
     */
    password?: string;
    /**
     * Parameter for oauth2 security
     *
     * @memberof Configuration
     * @param name Security name
     * @param scopes Oauth2 scope
     */
    accessToken?:
        | string
        | Promise<string>
        | ((name?: string, scopes?: string[]) => string)
        | ((name?: string, scopes?: string[]) => Promise<string>);
    /**
     * Override base path
     *
     * @memberof Configuration
     * @type {string}
     */
    basePath?: string;
    /**
     * Base options for axios calls
     *
     * @memberof Configuration
     * @type {any}
     */
    baseOptions?: any;
    /**
     * The FormData constructor that will be used to create multipart form data requests. You can
     * inject this here so that execution environments that do not support the FormData class can
     * still run the generated client.
     *
     * @type {new () => FormData}
     */
    formDataCtor?: new () => any;

    constructor(param: ConfigurationParameters = {}) {
        this.apiKey = param.apiKey;
        this.username = param.username;
        this.password = param.password;
        this.accessToken = param.accessToken;
        this.basePath = param.basePath;
        this.baseOptions = param.baseOptions;
        this.formDataCtor = param.formDataCtor;
    }

    /**
     * Check if the given MIME is a JSON MIME. JSON MIME examples: application/json
     * application/json; charset=UTF8 APPLICATION/JSON application/vnd.company+json
     *
     * @param mime - MIME (Multipurpose Internet Mail Extensions)
     * @returns True if the given MIME is JSON, false otherwise.
     */
    public isJsonMime(mime: string): boolean {
        const jsonMime: RegExp = new RegExp(
            '^(application/json|[^;/ \t]+/[^;/ \t]+[+]json)[ \t]*(;.*)?$',
            'i'
        );
        return (
            mime !== null &&
            (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json')
        );
    }
}
