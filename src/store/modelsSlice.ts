import { createSlice } from '@reduxjs/toolkit';
import { STATISTICAL_VALUES, STATISTICAL_VALUES_LIST } from 'utils/constants';
import { HYDRATE } from 'next-redux-wrapper';
import _ from 'lodash';

type ModelData = {
    // single model
    color: string | null; // if not set it defaults to standard value from api
    isVisible: boolean; // show/hide individual models from a group
    // init statistical values dynamically with for-loop
    [STATISTICAL_VALUES.mean]: boolean;
    // TODO: fix typing for this BS
    'standard deviation': boolean;
    [STATISTICAL_VALUES.median]: boolean;
    [STATISTICAL_VALUES.percentile]: boolean;
};
/**
 * This object serves as a template, whenever a new model is added to a group
 * this object describes the default settings of the freshly added model.
 * @constant {Object}
 * @category modelSlice
 * @default {color: null, isVisible: true}
 */
export const MODEL_DATA_TEMPLATE: ModelData = {
    // single model
    color: null, // if not set it defaults to standard value from api
    isVisible: true, // show/hide individual models from a group
    ...(STATISTICAL_VALUES_LIST.reduce((p, c) => {
        return { ...p, [c]: true };
    }, {}) as Record<STATISTICAL_VALUES, boolean>),
};

type ModelGroup = {
    name: string;
    models: Record<string, ModelData>;
    isVisible: boolean;
    visibleSV: {
        [STATISTICAL_VALUES.mean]: boolean;
        // TODO: fix typing for this BS
        'standard deviation': boolean;
        [STATISTICAL_VALUES.median]: boolean;
        [STATISTICAL_VALUES.percentile]: boolean;
    };
};

/**
 * This object serves as a template to a Model Group and defines major fields that have to be filled if a new model group is added.
 * @constant {Object}
 * @category modelSlice
 * @default { name: "",
    models: {}, 
    isVisible: true,
    visibleSV: { 
    }}
 */
const MODEL_GROUP_TEMPLATE: ModelGroup = {
    name: '',
    models: {}, // models is lookup table
    isVisible: true, // show/hide complete group
    visibleSV: STATISTICAL_VALUES_LIST.reduce((p, c) => {
        return { ...p, [c]: true };
    }, {}) as Record<STATISTICAL_VALUES, boolean>,
};

export type ModelState = {
    idCounter: number;
    modelGroups: Record<number | string, ModelGroup>;
};

export type GlobalModelState = {
    models: ModelState;
};

/**
 * The initial state of the modelSlice defines the data structure in the
 * store. Each plot has its own data i.e. have separate model(groups).
 *
 * IF you change this initial state you have to adapt the first test in the
 * corresponding test file, that tests the initial state.
 * @category modelSlice
 * @constant {object}
 * @default  {idCounter: 0, modelGroups: {}}
 */
const initialState: ModelState = {
    idCounter: 0,
    // currently active plot
    modelGroups: {},
};

type Payload<T> = {
    payload: T;
};

/**
 * The modelSlice is generated by the redux toolkit. The reducers are defined here
 * and the corresponding actions are auto-generated.
 * @category modelSlice
 * @constant {Object}
 */
const modelsSlice = createSlice({
    name: 'models',
    initialState: initialState,
    reducers: {
        /**
         * This reducer accepts an action object returned from setModelsOfModelGroup()
         *
         *      e.g. dispatch(setModelsOfModelGroup({
         *              groupId: 0,
         *              modelList: ["CCMI-1_ACCESS_ACCESS-CCM-refC2", "CCMI-1_CCCma_CMAM-refC2"]
         *      }))
         *
         * and calculates the new state based on the action and the action
         * data given in action.payload.
         *
         * This method provides a convenient interface for the AddModelGroupModal
         * by allowing to dispatch a groupId with the required models. If
         * the group already exists the corresponding data is updated otherwise
         * the reducer TAKES CARE of creating a group.
         *
         * @param {object} state the current store state of: state/models
         * @param {object} action accepts the action returned from updateModelGroup()
         * @param {object} action.payload the payload is an object containing the given data
         * @param {int} action.payload.groupId the name of the group to set
         * @param {string} action.payload.groupName the name of the group
         * @param {string} action.payload.modelList the list of models the group should have
         * @example dispatch(setModelsOfModelGroup({
         *              groupId: 0,
         *              modelList: ["CCMI-1_ACCESS_ACCESS-CCM-refC2", "CCMI-1_CCCma_CMAM-refC2"]
         *      }))
         */
        setModelsOfModelGroup(
            state: ModelState,
            {
                payload: { groupId, groupName, modelList },
            }: Payload<{ groupId?: number | string; groupName: string; modelList: string[] }>
        ) {
            // set model group
            if (groupId && groupId in state.modelGroups) {
                const selectedModelGroup = state.modelGroups[groupId];
                state.modelGroups[groupId].name = groupName;
                // remove unwanted
                selectedModelGroup.models = _.pick(selectedModelGroup.models, modelList);

                // add new ones
                for (const model of modelList) {
                    if (!(model in selectedModelGroup.models)) {
                        // initialize with default settings
                        selectedModelGroup.models[model] = MODEL_DATA_TEMPLATE;
                    }
                }
            } else {
                // create new group
                const newGroupId = state.idCounter++;
                const currentGroup = JSON.parse(JSON.stringify(MODEL_GROUP_TEMPLATE));
                currentGroup.name = groupName;

                for (const model of modelList) {
                    currentGroup.models[model] = JSON.parse(JSON.stringify(MODEL_DATA_TEMPLATE));
                }

                state.modelGroups[newGroupId] = currentGroup;
            }
            // change name either way
        },

        /**
         * This reducer accepts an action object returned from deleteModelGroup()
         *
         *      e.g. dispatch(deleteModelGroup({0: "refC2"}))
         *
         * and calculates the new state based on the action and the action
         * data given in action.payload.
         *
         * This method provides a convenient interface for the AddModelGroupModal
         * by allowing to dispatch a groupId with the required models. If
         * the group already exists the corresponding data is updated otherwise
         * the reducer takes care of creating a group.
         *
         * @param state the current store state of: state/models
         * @param groupId the name of the group that should be deleted
         * @example dispatch(deleteModelGroup({0: "refC2"}))
         */
        deleteModelGroup(
            state: ModelState,
            { payload: { groupId } }: Payload<{ groupId: number | string }>
        ) {
            if (!(groupId in state.modelGroups)) {
                // no group with this name in store
                throw new Error(`tried to delete "${groupId}" which is not a valid group`);
            }

            delete state.modelGroups[groupId]; // delete from lookup table
        },

        /**
         * This reducer accepts an action object returned from updatePropertiesOfModelGroup()
         *
         *      e.g. dispatch(setStatisticalValueForGroup(
         *          { groupID: 42, data: bigObject }
         *      ));
         *
         * This method provides an interface to update the properties of an existing model
         * group. The properties are whether the model is included in the statistical value(s)
         * and whether the model is visible.
         *
         * @param state the current store state of: state/models
         * @param groupId the name of the group whose model properties should be updated
         * @param data holds the information that should be updated
         * @example dispatch(setStatisticalValueForGroup(
         *          { groupID: 42, data: bigObject }
         *      ));
         */
        updatePropertiesOfModelGroup(
            state: ModelState,
            {
                payload: { groupId, data },
            }: Payload<{ groupId: number | string; data: ModelGroup['models'] }>
        ) {
            if (!(groupId in state.modelGroups)) {
                // no group with this name in store
                throw new Error(`tried to access "${groupId}" which is not a valid group`);
            }

            const modelGroup = state.modelGroups[groupId];
            for (const model in modelGroup.models) {
                modelGroup.models[model] = data[model];
            }
        },

        /**
         * This reducer accepts an action object returned from setStatisticalValueForGroup()
         *      e.g. dispatch(setStatisticalValueForGroup(
         *          {groupID: 0, svType: STATISTICAL_VALUES.median, isIncluded: true}
         *      ));
         * and calculates the new state based on the action and the action
         * data given in action.payload.
         *
         * In this case for a given group is set whether the given statistical values (SV)
         * should be displayed.
         *
         * @param {object} state the current store state of: state/models
         * @param {object} action accepts the action returned from updateModelGroup()
         * @param {object} action.payload the payload is an object containing the given data
         * @param {int} action.payload.groupId a string specifying the group
         * @param {string} action.payload.svType the SV as a string
         * @param {boolean} action.payload.isIncluded should the SV be displayed for the given group
         * @example dispatch(setStatisticalValueForGroup(
         *          {groupID: 0, svType: STATISTICAL_VALUES.median, isIncluded: true}
         *      ));
         */
        setStatisticalValueForGroup(
            state: ModelState,
            {
                payload: { groupId, svType, isIncluded },
            }: Payload<{
                groupId: number | string;
                svType: STATISTICAL_VALUES;
                isIncluded: boolean;
            }>
        ) {
            if (!STATISTICAL_VALUES_LIST.includes(svType)) {
                // svType doesn't represent a valid statistical value
                throw new Error(
                    `tried to set statistical value "${svType}" that is not a valid statistical value (${STATISTICAL_VALUES_LIST.join(
                        '|'
                    )})`
                );
            }
            if (!(groupId in state.modelGroups)) {
                // no group with this name in store
                throw new Error(`tried to access "${groupId}" which is not a valid group`);
            }

            state.modelGroups[groupId].visibleSV[svType] = isIncluded;
        },

        /**
         * This reducer accepts an action object returned from setVisibilityForGroup()
         *      e.g. dispatch(setVisibilityForGroup(
         *          {groupID: 0, isVisible: true}
         *      ));
         * and calculates the new state based on the action and the action
         * data given in action.payload.
         *
         * In this case for a given group is set whether it should be visible or not.
         *
         * @param state the current store state of: state/models
         * @param groupId a string specifying the group
         * @param isVisible should the group be visible
         * @throws an Error if the provided groupId is not valid
         * @example dispatch(setVisibilityForGroup(
         *          {groupID: 0, isVisible: true}
         *      ));
         */
        setVisibilityForGroup(
            state: ModelState,
            {
                payload: { groupId, isVisible },
            }: Payload<{ groupId: number | string; isVisible: boolean }>
        ) {
            if (!(groupId in state.modelGroups)) {
                throw new Error(`tried to access "${groupId}" which is not a valid group`);
            }

            state.modelGroups[groupId].isVisible = isVisible;
        },
    },
    extraReducers: {
        [HYDRATE]: (state: ModelState, action) => {
            console.log('HYDRATE', state, action.payload);
            return {
                ...state,
                ...action.payload.subject,
            };
        },
    },
});

/**
 * The here listed actions are exported and serve as an interface for
 * the view (our React components).
 * @constant {Object}
 * @category modelSlice
 */
export const {
    setModelsOfModelGroup,
    deleteModelGroup,
    updatePropertiesOfModelGroup,
    setStatisticalValueForGroup,
    setVisibilityForGroup,
} = modelsSlice.actions;

/**
 * The reducer combining all reducers defined in the plot slice.
 * This has to be included in the redux store, otherwise dispatching
 * the above defined actions wouldn't trigger state updates.
 * @category modelSlice
 */
export default modelsSlice.reducer;
/**
 * This selector allows components to select the models of a given group (specified by ID)
 *
 * @param {object} state the global redux state
 * @param {int} groupId the group id specifies which group should be retrieved
 * @returns an array containing all models currently in the given group
 * @function
 * @category modelSlice
 */
export const selectModelsOfGroup = (state: GlobalModelState, groupId: number) =>
    Object.keys(state.models.modelGroups[groupId].models);
/**
 * This selector allows components to select the model data of a given group (specified by ID)
 *
 * @param {object} state the global redux state
 * @param {int} groupId the group id specifies which group data should be retrieved
 * @returns an object containing all the data for each model present in the group. The model names are the keys.
 * @function
 * @category modelSlice
 */
export const selectModelDataOfGroup = (state: GlobalModelState, groupId: number) => {
    if (typeof state.models.modelGroups[groupId] !== 'undefined') {
        return state.models.modelGroups[groupId].models;
    }
    return {};
};
/**
 * This selector allows components to select the name of a given group (specified by ID)
 *
 * @param {object} state the global redux state
 * @param {int} groupId the group id specifies which group name should be retrieved
 * @returns a string that holds the name of the group
 * @function
 * @category modelSlice
 */
export const selectNameOfGroup = (state: GlobalModelState, groupId: number) => {
    if (typeof state.models.modelGroups[groupId] !== 'undefined') {
        return state.models.modelGroups[groupId].name;
    }
    return '';
};
/**
 * This selector allows components to select the statistical values of a given group (specified by ID)
 *
 * @param {object} state the global redux state
 * @param {int} groupId the group id specifies which data should be retrieved
 * @returns an object that maps each statistical value onto a boolean
 * @function
 * @category modelSlice
 */
export const selectStatisticalValueSettingsOfGroup = (state: GlobalModelState, groupId: number) =>
    state.models.modelGroups[groupId].visibleSV;
/**
 * This selector allows components to select the visibility of a given group (specified by ID)
 *
 * @param {object} state the global redux state
 * @param {int} groupId the group id specifies which data should be retrieved
 * @returns boolean value whether the group is visible or not
 * @function
 * @category modelSlice
 */
export const selectVisibilityOfGroup = (state: GlobalModelState, groupId: number) =>
    state.models.modelGroups[groupId].isVisible;
/**
 * This selector allows components to select all valid group ids
 *
 * @param {object} state the global redux state
 * @returns an array holding all valid group ids
 * @function
 * @category modelSlice
 */
export const selectAllGroupIds = (state: GlobalModelState) =>
    Object.keys(state.models.modelGroups).map((key) => parseInt(key));

/**
 * This selector allows components to select all Model Groups.
 *
 * @param  {object} state the global redux state
 * @returns an array containing all Model Groups
 * @function
 * @category modelSlice
 */
export const selectAllModelGroups = (state: GlobalModelState) => state.models.modelGroups;
