import { createSlice } from '@reduxjs/toolkit';
import {
    PROCESS_SV_WITH_PERCENTILE,
    STATISTICAL_VALUES,
    STATISTICAL_VALUES_LIST,
} from 'utils/constants';
import { HYDRATE } from 'next-redux-wrapper';
import { pick } from 'lodash';

type Optional<T, K extends keyof T> = Pick<Partial<T>, K> & Omit<T, K>;

type ModelData = {
    // single model
    color: string | null; // if not set it defaults to standard value from api
    isVisible: boolean; // show/hide individual models from a group
    // init statistical values dynamically with for-loop
} & Optional<
    Record<PROCESS_SV_WITH_PERCENTILE, boolean>,
    'lowerPercentile' | 'upperPercentile' | 'stdMean'
>;
/**
 * This object serves as a template, whenever a new model is added to a group this object describes
 * the default settings of the freshly added model.
 *
 * @category ModelSlice
 * @constant {Object}
 * @default { color: null, isVisible: true }
 */
export const MODEL_DATA_TEMPLATE: ModelData = {
    // single model
    color: null, // if not set it defaults to standard value from api
    isVisible: true, // show/hide individual models from a group
    ...(PROCESS_SV_WITH_PERCENTILE.reduce((p, c) => {
        return { ...p, [c]: true };
    }, {}) as Record<PROCESS_SV_WITH_PERCENTILE, boolean>),
};

export type ModelGroup = {
    name: string;
    models: Record<string, ModelData>;
    isVisible: boolean;
    visibleSV: Record<STATISTICAL_VALUES, boolean>;
};

/**
 * This object serves as a template to a Model Group and defines major fields that have to be filled
 * if a new model group is added.
 *
 * @category ModelSlice
 * @constant {Object}
 * @default { name: "",
 *     models: {},
 *     isVisible: true,
 *     visibleSV: {
 *     }}
 */
const MODEL_GROUP_TEMPLATE: ModelGroup = {
    name: '',
    models: {}, // models is lookup table
    isVisible: true, // show/hide complete group
    visibleSV: STATISTICAL_VALUES_LIST.reduce((p, c) => {
        return { ...p, [c]: true };
    }, {}) as Record<STATISTICAL_VALUES, boolean>,
};

export type ModelId = string;

export type ModelState = {
    idCounter: number;
    modelGroups: Record<ModelId, ModelGroup>;
};

export type GlobalModelState = {
    models: ModelState;
};

/**
 * The initial state of the modelSlice defines the data structure in the store. Each plot has its
 * own data i.e. have separate model(groups).
 *
 * IF you change this initial state you have to adapt the first test in the corresponding test file,
 * that tests the initial state.
 *
 * @category ModelSlice
 * @constant {object}
 * @default { idCounter: 0, modelGroups: {} }
 */
const initialState: ModelState = {
    idCounter: 0,
    // currently active plot
    modelGroups: {},
};

type Payload<T> = {
    payload: T;
};

/**
 * The modelSlice is generated by the redux toolkit. The reducers are defined here and the
 * corresponding actions are auto-generated.
 *
 * @category ModelSlice
 * @constant {Object}
 */
const modelsSlice = createSlice({
    name: 'models',
    initialState: initialState,
    reducers: {
        /**
         * This reducer accepts an action object returned from setModelsOfModelGroup()
         *
         *     e.g.dispatch(
         *         setModelsOfModelGroup({
         *             groupId: 0,
         *             modelList: ['CCMI-1_ACCESS_ACCESS-CCM-refC2', 'CCMI-1_CCCma_CMAM-refC2'],
         *         })
         *     );
         *
         * And calculates the new state based on the action and the action data given in
         * action.payload.
         *
         * This method provides a convenient interface for the AddModelGroupModal by allowing to
         * dispatch a groupId with the required models. If the group already exists the
         * corresponding data is updated otherwise the reducer TAKES CARE of creating a group.
         *
         * @example
         *     dispatch(
         *         setModelsOfModelGroup({
         *             groupId: 0,
         *             modelList: ['CCMI-1_ACCESS_ACCESS-CCM-refC2', 'CCMI-1_CCCma_CMAM-refC2'],
         *         })
         *     );
         *
         * @param {object} state The current store state of: state/models
         * @param {object} action Accepts the action returned from updateModelGroup()
         * @param {object} action.payload The payload is an object containing the given data
         * @param {int} action.payload.groupId The name of the group to set
         * @param {string} action.payload.groupName The name of the group
         * @param {string} action.payload.modelList The list of models the group should have
         */
        setModelsOfModelGroup(
            state: ModelState,
            {
                payload: { groupId, groupName, modelList },
            }: Payload<{ groupId?: number; groupName: string; modelList: string[] }>
        ) {
            // set model group
            if (groupId != null && groupId in state.modelGroups) {
                const selectedModelGroup = state.modelGroups[groupId];
                selectedModelGroup.name = groupName;
                // remove unwanted
                selectedModelGroup.models = pick(selectedModelGroup.models, modelList);

                // add new ones
                for (const model of modelList) {
                    if (!(model in selectedModelGroup.models)) {
                        // initialize with default settings
                        selectedModelGroup.models[model] = { ...MODEL_DATA_TEMPLATE };
                    }
                }
            } else {
                // create new group
                state.modelGroups[state.idCounter++] = {
                    ...MODEL_GROUP_TEMPLATE,
                    name: groupName,
                    models: modelList.reduce((acc, model) => {
                        acc[model] = { ...MODEL_DATA_TEMPLATE };
                        return acc;
                    }, {} as Record<string, ModelData>),
                };
            }
            // change name either way
        },

        /**
         * This reducer accepts an action object returned from deleteModelGroup()
         *
         *     e.g.dispatch(deleteModelGroup({ 0: 'refC2' }));
         *
         * And calculates the new state based on the action and the action data given in
         * action.payload.
         *
         * This method provides a convenient interface for the AddModelGroupModal by allowing to
         * dispatch a groupId with the required models. If the group already exists the
         * corresponding data is updated otherwise the reducer takes care of creating a group.
         *
         * @example
         *     dispatch(deleteModelGroup({ 0: 'refC2' }));
         *
         * @param state The current store state of: state/models
         * @param groupId The name of the group that should be deleted
         */
        deleteModelGroup(
            state: ModelState,
            { payload: { groupId } }: Payload<{ groupId: number | string }>
        ) {
            if (!(groupId in state.modelGroups)) {
                // no group with this name in store
                throw new Error(`tried to delete "${groupId}" which is not a valid group`);
            }

            delete state.modelGroups[groupId]; // delete from lookup table
        },

        /**
         * This reducer accepts an action object returned from updatePropertiesOfModelGroup()
         *
         *     e.g.dispatch(setStatisticalValueForGroup({ groupID: 42, data: bigObject }));
         *
         * This method provides an interface to update the properties of an existing model group.
         * The properties are whether the model is included in the statistical value(s) and whether
         * the model is visible.
         *
         * @example
         *     dispatch(setStatisticalValueForGroup({ groupID: 42, data: bigObject }));
         *
         * @param state The current store state of: state/models
         * @param groupId The name of the group whose model properties should be updated
         * @param data Holds the information that should be updated
         */
        updatePropertiesOfModelGroup(
            state: ModelState,
            {
                payload: { groupId, data },
            }: Payload<{ groupId: number | string; data: ModelGroup['models'] }>
        ) {
            if (!(groupId in state.modelGroups)) {
                // no group with this name in store
                throw new Error(`tried to access "${groupId}" which is not a valid group`);
            }

            const modelGroup = state.modelGroups[groupId];
            for (const model in modelGroup.models) {
                modelGroup.models[model] = data[model];
            }
        },

        /**
         * This reducer accepts an action object returned from setStatisticalValueForGroup() e.g.
         * dispatch(setStatisticalValueForGroup( {groupID: 0, svType: STATISTICAL_VALUES.median,
         * isIncluded: true} )); and calculates the new state based on the action and the action
         * data given in action.payload.
         *
         * In this case for a given group is set whether the given statistical values (SV) should be
         * displayed.
         *
         * @example
         *     dispatch(
         *         setStatisticalValueForGroup({
         *             groupID: 0,
         *             svType: STATISTICAL_VALUES.median,
         *             isIncluded: true,
         *         })
         *     );
         *
         * @param {object} state The current store state of: state/models
         * @param {object} action Accepts the action returned from updateModelGroup()
         * @param {object} action.payload The payload is an object containing the given data
         * @param {int} action.payload.groupId A string specifying the group
         * @param {string} action.payload.svType The SV as a string
         * @param {boolean} action.payload.isIncluded Should the SV be displayed for the given group
         */
        setStatisticalValueForGroup(
            state: ModelState,
            {
                payload: { groupId, svType, isIncluded },
            }: Payload<{
                groupId: number | string;
                svType: STATISTICAL_VALUES;
                isIncluded: boolean;
            }>
        ) {
            if (!STATISTICAL_VALUES_LIST.includes(svType)) {
                // svType doesn't represent a valid statistical value
                throw new Error(
                    `tried to set statistical value "${svType}" that is not a valid statistical value (${STATISTICAL_VALUES_LIST.join(
                        '|'
                    )})`
                );
            }
            if (!(groupId in state.modelGroups)) {
                // no group with this name in store
                throw new Error(`tried to access "${groupId}" which is not a valid group`);
            }

            state.modelGroups[groupId].visibleSV[svType] = isIncluded;
        },

        /**
         * This reducer accepts an action object returned from setVisibilityForGroup() e.g.
         * dispatch(setVisibilityForGroup( {groupID: 0, isVisible: true} )); and calculates the new
         * state based on the action and the action data given in action.payload.
         *
         * In this case for a given group is set whether it should be visible or not.
         *
         * @example
         *     dispatch(setVisibilityForGroup({ groupID: 0, isVisible: true }));
         *
         * @param state The current store state of: state/models
         * @param groupId A string specifying the group
         * @param isVisible Should the group be visible
         * @throws An Error if the provided groupId is not valid
         */
        setVisibilityForGroup(
            state: ModelState,
            {
                payload: { groupId, isVisible },
            }: Payload<{ groupId: number | string; isVisible: boolean }>
        ) {
            if (!(groupId in state.modelGroups)) {
                throw new Error(`tried to access "${groupId}" which is not a valid group`);
            }

            state.modelGroups[groupId].isVisible = isVisible;
        },
    },
    extraReducers: {
        [HYDRATE]: (state: ModelState, action) => {
            console.log('HYDRATE', state, action.payload);
            return {
                ...state,
                ...action.payload.subject,
            };
        },
    },
});

/**
 * The here listed actions are exported and serve as an interface for the view (our React
 * components).
 *
 * @category ModelSlice
 * @constant {Object}
 */
export const {
    setModelsOfModelGroup,
    deleteModelGroup,
    updatePropertiesOfModelGroup,
    setStatisticalValueForGroup,
    setVisibilityForGroup,
} = modelsSlice.actions;

/**
 * The reducer combining all reducers defined in the plot slice. This has to be included in the
 * redux store, otherwise dispatching the above defined actions wouldn't trigger state updates.
 *
 * @category ModelSlice
 */
export default modelsSlice.reducer;
/**
 * This selector allows components to select the models of a given group (specified by ID)
 *
 * @category ModelSlice
 * @function
 * @param {object} state The global redux state
 * @param {int} groupId The group id specifies which group should be retrieved
 * @returns An array containing all models currently in the given group
 */
export const selectModelsOfGroup = (state: GlobalModelState, groupId: number) =>
    Object.keys(state.models.modelGroups[groupId].models);
/**
 * This selector allows components to select the model data of a given group (specified by ID)
 *
 * @category ModelSlice
 * @function
 * @param {object} state The global redux state
 * @param {int} groupId The group id specifies which group data should be retrieved
 * @returns An object containing all the data for each model present in the group. The model names
 *   are the keys.
 */
export const selectModelDataOfGroup = (state: GlobalModelState, groupId?: number) => {
    if (groupId == null) {
        return {};
    }
    if (typeof state.models.modelGroups[groupId] !== 'undefined') {
        return state.models.modelGroups[groupId].models;
    }
    return {};
};
/**
 * This selector allows components to select the name of a given group (specified by ID)
 *
 * @category ModelSlice
 * @function
 * @param {object} state The global redux state
 * @param {int} groupId The group id specifies which group name should be retrieved
 * @returns A string that holds the name of the group
 */
export const selectNameOfGroup = (state: GlobalModelState, groupId?: number): string => {
    if (groupId == null) {
        return '';
    }
    if (typeof state.models.modelGroups[groupId] !== 'undefined') {
        return state.models.modelGroups[groupId].name;
    }
    return '';
};
/**
 * This selector allows components to select the statistical values of a given group (specified by
 * ID)
 *
 * @category ModelSlice
 * @function
 * @param {object} state The global redux state
 * @param {int} groupId The group id specifies which data should be retrieved
 * @returns An object that maps each statistical value onto a boolean
 */
export const selectStatisticalValueSettingsOfGroup = (state: GlobalModelState, groupId: number) =>
    state.models.modelGroups[groupId].visibleSV;
/**
 * This selector allows components to select the visibility of a given group (specified by ID)
 *
 * @category ModelSlice
 * @function
 * @param {object} state The global redux state
 * @param {int} groupId The group id specifies which data should be retrieved
 * @returns Boolean value whether the group is visible or not
 */
export const selectVisibilityOfGroup = (state: GlobalModelState, groupId: number) =>
    state.models.modelGroups[groupId].isVisible;
/**
 * This selector allows components to select all valid group ids
 *
 * @category ModelSlice
 * @function
 * @param {object} state The global redux state
 * @returns An array holding all valid group ids
 */
export const selectAllGroupIds = (state: GlobalModelState) =>
    Object.keys(state.models.modelGroups).map((key) => parseInt(key));

/**
 * This selector allows components to select all Model Groups.
 *
 * @category ModelSlice
 * @function
 * @param {object} state The global redux state
 * @returns An array containing all Model Groups
 */
export const selectAllModelGroups = (state: GlobalModelState) => state.models.modelGroups;
